"""
13398번 연속합 2

1.  연속합 문제의 응용
    기본적으로 연속합 문제는 바로 이전까지의 최대 순열의 합과 현재 위치의 값을 비교하여
    더해서 커지면 이전 값+현재 값을 저장하고, 이전 값을 더해 현재 값보다 오히려 작아진다면
    현재 값만 저장한다.

2.  이 문제에서는 하나의 수를 제거하고 수열을 계산할 수 있기 때문에, 1)제거하지 않는 경우와
    2)제거하는 경우를 별도로 모두 계산해 놓아야 한다. 1)은 위의 1번의 과정과 동일하다.
    2)는 현재 값을 제거하여 이전 값을 그대로 쓸 것인지, 
    아니면 이전에 값 하나가 제거된 수열의 합에 현재 값을 더할 것인지 결정해야 한다.
    만약, 현재 값을 제거한다면 제거되지 않은 1)의 과정을 통해 구해전 수열을 가져와 계산하고
    제거하지 않는다면 이전에 값이 제거된 수열의 값만 이용해 계속해서 계산해야
    단 하나의 수만 제거한 수열이 계산될 수 있다.
    
3.  이 수열에는 음수 -1000부터 포함될 수 있으므로, 최대값을 계산할 때의 초기값 설정을 -1001로 설정    
"""

n = int(input())

A = list(map(int, input().split()))

cache = [[-1001, -1001] for _ in range(n)]
cache[0][0] = A[0]

for i in range(1, n):
    cache[i][0] = max(cache[i - 1][0] + A[i], A[i])
    cache[i][1] = max(cache[i - 1][0], cache[i - 1][1] + A[i])

max = -1001
for i in range(n):
    for j in range(2):
        if max < cache[i][j]:
            max = cache[i][j]

print(max)
